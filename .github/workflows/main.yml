name: Run my script

on:
  # Descomenta el schedule si quieres que se ejecute cada lunes a las 00:00 UTC
  # schedule:
  #   - cron: '0 0 * * 1'
  
  # Permite ejecución manual desde GitHub Actions
  workflow_dispatch:
  
  # Se activa si se hacen commits que afecten a Guiones/capitulos/*.json (nuevos o modificados)
  push:
    paths:
      - 'Guiones/capitulos/*.json'

permissions:
  contents: write

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install ffmpeg
        run: sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: Create service account file
        run: echo "${{ secrets.GOOGLE_SERVICE_ACCOUNT_BASE64 }}" | base64 --decode > service_account.json

      #
      # 1) Verificamos si realmente se agregaron archivos nuevos.
      #    Comparamos el commit anterior (HEAD^) con HEAD.
      #    Si encuentra líneas que empiecen con "A   Guiones/capitulos/xxxxx.json", es un archivo nuevo.
      #
      - name: Check for newly added files
        id: check_new_files
        run: |
          set -e
          # Intentamos un fetch para asegurarnos de tener el commit previo
          git fetch --no-tags --depth=2
          PREV_COMMIT=$(git rev-parse HEAD^ || true)
          if [ -z "$PREV_COMMIT" ]; then
            echo "No commit previo (quizás es el primer commit)."
            echo "new_files=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Buscamos en el diff si hay líneas marcadas como 'A' (added) en Guiones/capitulos/
          ADDED=$(git diff --name-status $PREV_COMMIT HEAD | grep -E '^A\sGuiones/capitulos/.*\.json' || true)
          
          if [ -z "$ADDED" ]; then
            echo "No newly added JSON files in Guiones/capitulos."
            echo "new_files=false" >> $GITHUB_OUTPUT
          else
            echo "Found newly added file(s):"
            echo "$ADDED"
            echo "new_files=true" >> $GITHUB_OUTPUT
          fi

      #
      # 2) Si no hay archivos nuevos, terminamos la job con éxito ("exit 0").
      #    Así NO sale como “skipped”, sino “passed” sin más.
      #
      - name: Exit if no new files
        if: steps.check_new_files.outputs.new_files == 'false'
        run: |
          echo "No new files found. Exiting early."
          exit 0

      #
      # 3) Sólo si sí hay archivos nuevos, ejecutamos el script principal
      #
      - name: Run script
        run: python main.py
        env:
          GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
          VALOR_A: ${{ secrets.VALOR_A }}
          VALOR_B: ${{ secrets.VALOR_B }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      #
      # 4) Configuración de Git y commit de cambios
      #
      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Stage and commit changes
        run: |
          git add .
          git commit -m "Automated commit by GitHub Actions" || echo "No changes to commit"

      #
      # 5) Pull con rebase (solo si hay cambios en remoto)
      #
      - name: Pull latest changes (rebase) if needed
        run: |
          git fetch origin main
          LOCAL=$(git rev-parse HEAD)
          REMOTE=$(git rev-parse origin/main)
          if [ "$LOCAL" != "$REMOTE" ]; then
            echo "Remote branch has updates, pulling changes..."
            git pull --rebase origin main
          else
            echo "Already up-to-date, no pull needed."
          fi

      #
      # 6) Push final
      #
      - name: Push changes
        run: git push
